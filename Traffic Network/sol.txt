#include <bits/stdc++.h>
using namespace std;

const int inf = 1000000007;

void dijkstra(const int &startNode, vector <vector <pair <int, int> > > &adj, vector <int> &dist) {
    priority_queue <pair <int, int>, vector <pair <int, int> >, greater <pair <int, int> > > pq;
    dist[startNode] = 0;
    pq.push({0, startNode});
    while (!pq.empty()) {
        auto [distance, u] = pq.top(); pq.pop();
        if (distance != dist[u]) continue;
        for (auto [v, weight] : adj[u]) {
            if (dist[v] > dist[u] + weight) {
                dist[v] = dist[u] + weight;
                pq.push({dist[v], v});
            }
        }
    }
}

int main() {
    int te;
    cin >> te;
    while (te--) {
        int n, m, k, s, t;
        cin >> n >> m >> k >> s >> t;
        vector<vector<pair<int,int>>> adj(n + 1), rev_adj(n + 1);
        for (int i = 0; i < m; ++i) {
            int u, v, w;
            cin >> u >> v >> w;
            adj[u].push_back({v, w});
            rev_adj[v].push_back({u, w});
        }

        vector<int> dist(n + 1, inf), rev_dist(n + 1, inf);
        dijkstra(s, adj, dist);
        dijkstra(t, rev_adj, rev_dist);

        int ans = dist[t];
        for (int i = 0; i < k; ++i) {
            int u, v, w;
            cin >> u >> v >> w;
            if (dist[u] != inf && rev_dist[v] != inf)
                ans = min(ans, dist[u] + w + rev_dist[v]);
            if (dist[v] != inf && rev_dist[u] != inf)
                ans = min(ans, dist[v] + w + rev_dist[u]);
        }

        cout << (ans == inf ? -1 : ans) << endl;
    }
    return 0;
}
