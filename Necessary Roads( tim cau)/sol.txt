#include <iostream>
#include <vector>
#include <math.h>
#include <utility>

using namespace std;

int n, m;
vector<int> adj[100005];
int low[100005], numb[100005];
int timeDfs = 0;
vector<pair<int, int>> ans;

void dfs(int u, int father) {
    timeDfs++;
    numb[u] = timeDfs;
    low[u] = timeDfs;

    for (int i = 0; i < (int)adj[u].size(); i++) {
        int v = adj[u][i];
        if (v == father) continue;

        if (numb[v] == 0) {
            dfs(v, u);
            if (low[v] == numb[v]) {
                ans.push_back(make_pair(u, v));
            }
            low[u] = min(low[u], low[v]);
        } else {
            low[u] = min(low[u], numb[v]);
        }
    }
}

int main() {
    cin >> n >> m;
    for (int i = 1; i <= m; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    for (int i = 1; i <= n; i++) {
        if (numb[i] == 0) {
            dfs(i, 0);
        }
    }

    cout << (int)ans.size() << endl;
    for (int i = 0; i < (int)ans.size(); i++) {
        cout << ans[i].first << ' ' << ans[i].second << endl;
    }

    return 0;
}
