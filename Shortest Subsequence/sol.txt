#include <iostream>
#include <string>
#include <vector> 
#include <algorithm>

using namespace std;

const char ch[4] = {'A', 'C', 'G', 'T'}; 
string s; 
vector<int> position[4]; 
string ans = ""; 
 
int main() {
    cin >> s;    
    for (int i = 0; i < (int)s.size(); i++) {
        if (s[i] == 'A') {
            s[i] = '0'; 
        }
        else if (s[i] == 'C') {
            s[i] = '1'; 
        }
        else if (s[i] == 'G') {
            s[i] = '2'; 
        }
        else {
            s[i] = '3'; 
        }
    }
    for (int i = 0; i < (int)s.size(); i++) {
        position[s[i] - '0'].push_back(i);
    }
    string ans = ""; 
    for (int i = 0; i <= 3; i++) {
        reverse(position[i].begin(), position[i].end());
    }
    int curPos = -1; 
    while (!position[0].empty() && !position[1].empty() && !position[2].empty() && !position[3].empty()) {
        bool check = true; 
        for (int c = 0; c <= 3; c++) {
            while (!position[c].empty() && position[c].back() <= curPos) {
                position[c].pop_back(); 
            }
            if (position[c].empty()) {
                check = false;
                break; 
            }
        }
        if (!check) {
            break; 
        }       
        char nextChar = 'A'; 
        int maxPos = position[0].back();
        if (maxPos < position[1].back()) {
            nextChar = 'C';
            maxPos = position[1].back();
        }
        if (maxPos < position[2].back()) {
            nextChar = 'G';
            maxPos = position[2].back();
        }
        if (maxPos < position[3].back()) {
            nextChar = 'T';
            maxPos = position[3].back();
        }
        ans += nextChar; 
        curPos = maxPos; 
    }
    for (int c = 0; c <= 3; c++) {
        if (position[c].empty()) {
            ans += ch[c];
            break; 
        }
    }
    cout << ans; 
    return 0;
}
