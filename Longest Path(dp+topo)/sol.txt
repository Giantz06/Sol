#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int n, m;
bool vis[100005];
vector<int> adj[100005];
int f[100005];
int cntIn[100005]; 
vector<int> topo;

void dfs(int u) {
    vis[u] = true;
    for (int i = 0; i < adj[u].size(); i++) {
        if (!vis[adj[u][i]]) dfs(adj[u][i]);
    }
    topo.push_back(u);
}

int main() {
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        cntIn[b]++; 
    }

    for (int i = 1; i <= n; i++) {
        if (cntIn[i]==0) dfs(i);
    }

    reverse(topo.begin(), topo.end());

    for (int i = 0; i < (int)topo.size(); i++) {
        int u = topo[i];
        for (int j = 0; j < (int)adj[u].size(); j++) {
            int v = adj[u][j];
            f[v] = max(f[v], f[u] + 1);
        }
    }

    int ans = 0;
    for (int i = 1; i <= n; i++) {
        ans = max(ans, f[i]);
    }

    cout << ans;
    return 0;
}
