#include <iostream>
#include <vector>
#include <set>
using namespace std;

int n, m;
multiset<int> adj[100005];
vector<int> ans;
int deg[100005];

void dfs(int u) {

    while (!adj[u].empty()) {
        int v = *adj[u].begin();
        adj[u].erase(adj[u].find(v));
        adj[v].erase(adj[v].find(u));
        dfs(v);
    }
ans.push_back(u);
}

int main() {
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        deg[u]++;
        deg[v]++;
        adj[u].insert(v);
        adj[v].insert(u);
    }

    for (int i = 1; i <= n; i++) {
        if (deg[i] % 2 != 0) {
            cout << "IMPOSSIBLE";
            return 0;
        }
    }

    dfs(1);

    if (ans.size() != m + 1) {
        cout << "IMPOSSIBLE";
        return 0;
    }

    for (int i = ans.size() - 1; i >= 0; i--)
        cout << ans[i] << " ";
    cout << endl;

    return 0;
}
