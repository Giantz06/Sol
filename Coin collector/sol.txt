#include <bits/stdc++.h>
using namespace std;
const int maxN = 100005;
int n, m;
vector<int> adj[maxN];
vector<int> adj2[maxN];
int numb[maxN], low[maxN];
int root[maxN];
long long price[maxN];
int timeDfs = 0;
bool deleted[maxN];
stack<int> store;
int k[maxN];
void dfs(int u) {
  timeDfs++;
  numb[u] = low[u] = timeDfs;
  store.push(u);
  for (int i = 0; i < (int)adj[u].size(); i++) {
    int v = adj[u][i];
    if (deleted[v] == true) {
      continue;
    }
    if (numb[v] == 0) {
      dfs(v);
      low[u] = min(low[u], low[v]);
    } else {
      low[u] = min(low[u], numb[v]);
    }
  }
  if (low[u] == numb[u]) {
    do {
      int v = store.top();
      store.pop();
      deleted[v] = true;
      root[v] = u;
      price[root[v]] += 1ll*k[v];
      if (v == u) {
        break;
      }
    } while (true);
  }
}
int gr2[maxN];
vector <int> dag;
long long f[maxN];
void topo(int u){
    gr2[u] = 1;
    for(int i = 0;i<adj2[u].size();i++){
        int v = adj2[u][i];
        if(gr2[v]==0) topo(v);
    }
    gr2[u] = 2;
    dag.push_back(u);
}
int main() {
  cin >> n >> m;
  for(int i = 1;i<=n;i++) cin>>k[i];
  for (int i = 1; i <= m; i++) {
    int u, v;
    cin >> u >> v;
    adj[u].push_back(v);
  }
  for (int i = 1; i <= n; i++) {
    if (numb[i] == 0) {
      dfs(i);
    }
  }
  for (int u = 1; u <= n; u++) {
    for (int i = 0; i < (int)adj[u].size(); i++) {
      int v = adj[u][i];
      int rootu = root[u];
      int rootv = root[v];
      if (rootu != rootv) {
        adj2[rootu].push_back(rootv);
      }
    }
  }
  for(int u = 1;u<=n;u++){
    if(u==root[u]) topo(root[u]);
  }
   reverse(dag.begin(), dag.end());
    for (int u : dag) {
    f[u] = max(f[u], 1ll*price[u]);
    for (int v : adj2[u]) {
        f[v] = max(f[v], f[u] + 1ll*price[v]);
    }
}

    long long ans = 0;
    for (int i = 1; i <= n; i++) {
        ans = max(ans, f[i]);
    }

    cout << ans;

  return 0;
}
